*모듈
1. 특정한 기능을 하는 함수나 변수의 집합
2. 모듈 자체로 하나의 프로그램으로 사용 가능 
3. 다른 프로그램에 활용 가능 

*장점
1. 파일별로 코드를 모듈화하여 재사용 향상

#모듈 생성
1. exports 객체 사용 
module exports.모듈 외부에서 사용할 이름=모듈 내부에서의 이름; 
2. require()함수로 호출
const 모듈을 불러와 사용할 이름= require('모듈파일의 주소');

commonJS
exports require
ES
export import

*노드 모듈 방식 
1. commonJS 모듈
2. ECMAScript 모듈


commonJS모듈 
1. NodeJS에서 사용하는 보편적 모듈
2. 하나의 파일에서 가능을 실행하는 모듈을 내보내고 다른 파일에서 해당 기능을 불러와 사용 
3. 동기적으로 파일 로드
4. 내보내기 (module.export)는 최하단에 위치하지 않아도 무관
5. 하나의 객체만 내보낼 경우 module.exports 변수에 할당
module.exports = object.property = value
6. 여러 개의 객체를 내보낼 경우 exports 변수의 속성으로 할당
exports.??? = object.method(params)


*export 객체 사용 시 유의 사항
1. exports 객체는 module.exports를 참조하므로 참조관계 유지주의
2. exports 객체에는 객체 형식의 데이터처럼 속성명과 속성값 입력 필요
3. exports와 module.exports중 하나만 사용하는 것이 유리

*불러오기 
1. require 함수 사용
2. require은 최상단에 작성하지 않아도 무관.
const 변수명 = require('./불러올 파일 경로')
3.파일명의 확장자 .js 생략가능


ES(ECMAScript) 모듈
1. 자바스크립트의 공식 모듈 형식
2. 브라우저와 노드 모두에 같은 형식 사용
3. 비동기적으로 파일로드
4. 파일 단위로 모듈구성

*내보내기 
1.ES 모듈 사용시 둘 중 하나를 반드시 사용 
package.json 파일 생성 후 속성과 값에 "type":"module"을 추가
파일 확장자를 mjs로 변경
2. 변수 또는 함수명 앞에 export키워드 추가 
export const a = 1;

*불러오기
1. import문 사용 
2. 객체저장 변수에 {}사용
3. 파일명의 확장자 반드시 작성
import {변수명, 변수명, ...} from ('./파일명.확장자');
const {변수명, 변수명, ...} await import('./파일명.확장자'); //node  v18이상 